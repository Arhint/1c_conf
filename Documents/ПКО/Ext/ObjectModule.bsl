
//Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
//	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
//	// Даний фрагмент побудований конструктором.
//	// При повторному використанні конструктора, внесені вручну зміни будуть втрачені!!!
//	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
//		// Заповнення шапки
//		Контрагент = ДанныеЗаполнения.Контрагент;
//		НаОсновании = ДанныеЗаполнения.Ссылка;
//		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
//	КонецЕсли;
//	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
//КонецПроцедуры

//Процедура ОбработкаПроведения(Отказ, Режим)
//	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
//	// Даний фрагмент побудований конструктором.
//	// При повторному використанні конструктора, внесені вручну зміни будуть втрачені!!!

//	// регістр Взаиморасчеты Приход
//	Движения.Взаиморасчеты.Записывать = Истина;
//	Движение = Движения.Взаиморасчеты.Добавить();
//	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
//	Движение.Период = Дата;
//	Движение.Контрагент = Контрагент;
//	Движение.Сумма = СуммаДокумента;

//	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
//КонецПроцедуры



Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Даний фрагмент побудований конструктором.
	// При повторному використанні конструктора, внесені вручну зміни будуть втрачені!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		// Заповнення шапки
		Контрагент = ДанныеЗаполнения.Контрагент;
		Основание = ДанныеЗаполнения.Ссылка;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры


Функция  ПолучениеДанных()
	
	Запрос = новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ВидДвижения КАК ВидДвижения,
	               |	ПКО.Контрагент КАК Контрагент,
	               |	ПКО.СуммаДокумента КАК СуммаДокумента,
	               |	ПКО.Дата КАК Период
	               |ИЗ
	               |	Документ.ПКО КАК ПКО";
				   
				   
	Запрос.УстановитьПараметр("СсылкаНаДокумент", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	// Создаем таблицу нужных нам данных
	Возврат ТЗ;        
	
	
Конецфункции


Функция ПроверитьДанные (ТЗ)
	                                // Проверка на валидность данных
									
	МожноПроводить = истина;
	
	//Для каждого стр из ТЗ цикл
	//	Если стр.Цена > стр.Последняя тогда
	//		Сообщить("Цена уыеличилась, с"+стр.Последняя+" на "+стр.Цена);
	//		МожноПроводить = ложь;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат МожноПроводить;

Конецфункции


Процедура ОбработкаПроведения(Отказ, Режим)
	
	 ТаблицаДляПроведения = ПолучениеДанных();
	 
	 МожноПроводить = ПроверитьДанные(ТаблицаДляПроведения);
	 
	 
	 Если не МожноПроводить тогда    // Если переменная МожноПроводить отказ, то не проводим
		 Отказ = истина;
		 Возврат;
	 Конецесли;
	 
	 // таблицы для загрузки с нужными данными
	 //ТаблицаДляПартии = ТаблицаДляПроведения.Скопировать(, "ВидДвижения, Период, Номенклатура, Склад, Партия, Количество, Сумма");
	 //ТаблицаДляЗакупочнаяЦена = ТаблицаДляПроведения.Скопировать(, "ВидДвижения, Период, Номенклатура, Контрагент, Цена"); 
	 
	 //Движения.ЗакупочнаяЦена.Записывать = Истина;
	 //Движения.Закупка.Записывать = Истина;
	 //Движения.ТоварыНаСкладе.Записывать = Истина;
	 Движения.ВзаимоРасчеты.Записывать = Истина;
	 //Движения.ПартияТоваров.Записывать = Истина;
	 
	 //Движения.ЗакупочнаяЦена.Загрузить(ТаблицаДляЗакупочнаяЦена);
	 //Движения.Закупка.Загрузить(ТаблицаДляПроведения);
	 //Движения.ТоварыНаСкладе.Загрузить(ТаблицаДляПроведения);
	 Движения.ВзаимоРасчеты.Загрузить(ТаблицаДляПроведения);
	 //Движения.ПартияТоваров.Загрузить(ТаблицаДляПартии);
	
	 
КонецПроцедуры
